basePath: /v1
definitions:
  api.CreateUserTokenPayload:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  model.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user_id:
        type: integer
    type: object
  model.CreateCommentPayload:
    properties:
      content:
        maxLength: 500
        type: string
    required:
    - content
    type: object
  model.CreatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  model.Post:
    properties:
      comments_count:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      version:
        type: integer
    type: object
  model.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      title:
        maxLength: 100
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      username:
        type: string
    type: object
  model.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      token:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Gopher Social
  title: GopherSocial API
paths:
  /auth/token:
    post:
      consumes:
      - application/json
      description: Generate a JWT token for a user using their email and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/api.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "201":
          description: JWT token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Generate a JWT token for a user
      tags:
      - auth
  /auth/user:
    post:
      consumes:
      - application/json
      description: Register a new user with the given information
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/model.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register a new user
      tags:
      - auth
  /auth/user/activate:
    put:
      description: Activate a user account using the provided token
      parameters:
      - description: Activation token
        in: query
        name: token
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Activate a user account
      tags:
      - auth
  /health:
    get:
      description: Simple health check to see if the API is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health Check
      tags:
      - health
  /posts:
    post:
      consumes:
      - application/json
      description: Create a new post with the given information
      parameters:
      - description: Post payload
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.CreatePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Post'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{postId}:
    delete:
      description: Delete a post by their ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete a post by ID
      tags:
      - posts
    get:
      description: Get a post by their ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get a post by ID
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update a post by their ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: Post payload
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Post'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update a post by ID
      tags:
      - posts
  /posts/{postId}/comments:
    get:
      description: Get all comments for a specific post by the post ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Comment'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get comments for a post
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create a new comment for a post with the given information
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: Comment payload
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.CreateCommentPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Comment'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Create a new comment for a post
      tags:
      - comments
  /users/{userId}:
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
  /users/{userId}/follow:
    put:
      description: Follow a user by their ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Follow a user
      tags:
      - users
  /users/{userId}/unfollow:
    put:
      description: Unfollow a user by their ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Unfollow a user
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Get the feed for the authenticated user
      parameters:
      - default: 20
        description: Number of posts to return
        in: query
        maximum: 25
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: Number of posts to skip
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: desc
        description: 'Sort order: asc or desc'
        in: query
        name: sort
        type: string
      - description: Comma-separated list of tags to filter by
        in: query
        name: tags
        type: string
      - description: Search term to filter posts by title or content
        in: query
        name: search
        type: string
      - description: ISO 8601 date to filter posts created after this date
        in: query
        name: since
        type: string
      - description: ISO 8601 date to filter posts created before this date
        in: query
        name: until
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Post'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get user feed
      tags:
      - feed
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
